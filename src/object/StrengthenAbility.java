package object;

/**
 * @program: Effective Java
 * @description: 增强不可实例化的能力
 * @author: 王志立
 * @create: 2018-12-25 19:31
 **/

/**Non-instantiable utility class*/
public class StrengthenAbility {
    //todo 通过私有构造器强化不可实例化能力
    /* 1. 对于不希望被实例化的工具类来说，实例化化他是没有任何意义的，然而，在缺少显示构造器的环境下，编译器会提供一个公有的，无参数的缺省的构造器，对于用户而言，这个构造器与常规的构造器没有任何区别
     * 2. 企图通过将类做成抽象来强制该类不可被实例化，这是行不通的，该类可以被之类化，并且该子类也可以被实例化。这样最误导用户，以为这种类是为了继承而设计的。
     * 3. 由于只有当类不包含显示的构造器时，编译器才会生成缺省的构造器，只需要让这个类包含的私有构造器，他就不能被实例化了
     * 4. 由于显式的构造器是是私有的，所以不可以在该类的外部访问他
     * 5. AssertionError是不是必须的，但是它可以避免不小心在类的内部掉哟构造器，他保证该类在任何情况下都不会被实例化。
     * 6. 好的构造器就是专门设计成不能被调用的一样，因此，明确的做法是在代码中增加一条注释
     * 7. 这样会使得一个类不能被子类化，所有的构造器都必须显式或隐式的调用超类构造器，在这种情形下，之类就没有可访问的超类构造器可调用了。
    * */

    private StrengthenAbility(){
        //提供默认构造器，但不可被实例化
        throw new AssertionError();
    }

    public static void main(String[] args) {
        new StrengthenAbility();
    }

}
